# =============================================================================
# AUSTRALIAN NATIONAL UNIVERSITY OPEN SOURCE LICENSE (ANUOS LICENSE)
# VERSION 1.3
# 
# The contents of this file are subject to the ANUOS License Version 1.2
# (the "License"); you may not use this file except in compliance with
# the License. You may obtain a copy of the License at:
# 
#   http://datamining.anu.edu.au/linkage.html
# 
# Software distributed under the License is distributed on an "AS IS"
# basis, WITHOUT WARRANTY OF ANY KIND, either express or implied. See
# the License for the specific language governing rights and limitations
# under the License.
# 
# The Original Software is: "SeguroDefeso.py"
# 
# The Initial Developers of the Original Software are:
#   Peter Christen
# 
# Copyright (C) 2002 - 2011 the Australian National University and
# others. All Rights Reserved.
# 
# Contributors:
# 
# Alternatively, the contents of this file may be used under the terms
# of the GNU General Public License Version 2 or later (the "GPL"), in
# which case the provisions of the GPL are applicable instead of those
# above. The GPL is available at the following URL: http://www.gnu.org/
# If you wish to allow use of your version of this file only under the
# terms of the GPL, and not to allow others to use your version of this
# file under the terms of the ANUOS License, indicate your decision by
# deleting the provisions above and replace them with the notice and
# other provisions required by the GPL. If you do not delete the
# provisions above, a recipient may use your version of this file under
# the terms of any one of the ANUOS License or the GPL.
# =============================================================================

# =============================================================================
# Start of Febrl project module: "SeguroDefeso.py"
#
# Generated using "guiFebrl.py" on Mon Sep 11 23:38:10 2017
# =============================================================================

# Import necessary modules (Python standard modules first, then Febrl modules)

import logging

import classification
import comparison
import dataset
import encode
import indexing
import measurements
import mymath
import output
import stringcmp

# -----------------------------------------------------------------------------
# Intialise a logger, set level to info oe warning
#
log_level = logging.INFO # logging.WARNING

my_logger = logging.getLogger()
my_logger.setLevel(log_level)

# -----------------------------------------------------------------------------
# Febrl project type: Link
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------

# Define input data set A:
#
data_set_a = dataset.DataSetCSV(description="Data set generated by Febrl GUI",
                                access_mode="read",
                                strip_fields=True,
                                miss_val=[''],
                                rec_ident="PIS",
                                file_name="/home/rodrigo/Projetos/reclink/teste/sdf1103.csv",
                                header_line=True,
                                delimiter=",",
                                field_list = [("PIS",0),
                                              ("RGP",1),
                                              ("NOME",2),
                                              ("UF",3),
                                              ("MUNICIPIO",4)])

# Define input data set B:
#
data_set_b = dataset.DataSetCSV(description="Data set generated by Febrl GUI",
                                access_mode="read",
                                strip_fields=True,
                                miss_val=[''],
                                rec_ident="PIS",
                                file_name="/home/rodrigo/Projetos/reclink/teste/sdf1703.csv",
                                header_line=True,
                                delimiter=",",
                                field_list = [("PIS",0),
                                              ("RGP",1),
                                              ("NOME",2),
                                              ("UF",3),
                                              ("MUNICIPIO",4)])


# -----------------------------------------------------------------------------

# Define field comparison functions
#
fc_funct_1 = comparison.FieldComparatorExactString(agree_weight = 30,
                                                   description = "Str-Exact-PIS-PIS",
                                                   disagree_weight = 5,
                                                   missing_weight = 5)

fc_funct_2 = comparison.FieldComparatorWinkler(agree_weight = 30,
                                               description = "Winkler-RGP-RGP",
                                               disagree_weight = 2,
                                               missing_weight = 2,
                                               threshold = 0.0,
                                               check_sim = True,
                                               check_init = True,
                                               check_long = True)

fc_funct_3 = comparison.FieldComparatorJaro(agree_weight = 85,
                                            description = "Jaro-NOME-NOME",
                                            disagree_weight = 5,
                                            missing_weight = 5,
                                            threshold = 0.0)

fc_funct_4 = comparison.FieldComparatorNumericAbs(agree_weight = 40,
                                                  description = "Num-Abs-MUNICIPIO-MUNICIPIO",
                                                  disagree_weight = 4,
                                                  missing_weight = 4,
                                                  max_abs_diff = 100)

field_comp_list = [(fc_funct_1, "PIS", "PIS"),
                   (fc_funct_2, "RGP", "RGP"),
                   (fc_funct_3, "NOME", "NOME"),
                   (fc_funct_4, "MUNICIPIO", "MUNICIPIO")]

rec_comp = comparison.RecordComparator(data_set_a, data_set_b, field_comp_list)

# -----------------------------------------------------------------------------

# Define indices for "blocking"
#
index_def_1 = [["UF", "UF", False, False, None, []],
               ["NOME", "NOME", False, False, None, [encode.soundex]]]

index = indexing.BigMatchIndex(dataset1 = data_set_a,
                               dataset2 = data_set_b,
                               rec_comparator = rec_comp,
                               weight_vec_file = "/home/rodrigo/Projetos/reclink/teste/weight-vector",
                               progress_report = 10,
                               index_sep_str = "",
                               skip_missing = True,
                               index_def = [index_def_1],
                               block_method = ("block",))

# Build and compact index
#
index.build()

index.compact()

# Do record pair comparisons
#
index.run()

[field_names_list, w_vec_dict] = output.LoadWeightVectorFile("/home/rodrigo/Projetos/reclink/teste/weight-vector")

# -----------------------------------------------------------------------------

# Define weight vector (record pair) classifier
#
classifier = classification.KMeans(dist_measure = mymath.distL2,
                                   max_iter_count = 5,
                                   centroid_init = "min/max")

# Unsupervised training of classifier
#
class_w_vec_dict = w_vec_dict  # Use orignal weight vector dictionary

classifier.train(class_w_vec_dict, set(), set())

# Classify all weight vectors
#
[m_set, nm_set, pm_set] = classifier.classify(class_w_vec_dict)

# -----------------------------------------------------------------------------

# Define output file options
#
histo_str_list = output.GenerateHistogram(class_w_vec_dict, 1.0, "/home/rodrigo/Projetos/reclink/teste/histogram")

for line in histo_str_list:
  print line
output.SaveMatchStatusFile(class_w_vec_dict, m_set, "/home/rodrigo/Projetos/reclink/teste/match-status")

output.SaveMatchDataSet(m_set, data_set_a, "match_id", "/home/rodrigo/Projetos/reclink/teste/sdf1103-match.csv", data_set_b, "match_id", "/home/rodrigo/Projetos/reclink/teste/sdf1703-match.csv")


# =============================================================================
# End of Febrl project module: "SeguroDefeso.py"
# =============================================================================
